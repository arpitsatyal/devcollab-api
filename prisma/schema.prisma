generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  email              String?             @unique
  name               String?
  image              String?
  createdAt          DateTime            @default(now())
  emailVerified      DateTime?
  projects           Project[]           @relation("ProjectOwner")
  snippets           Snippet[]           @relation("AuthorRelation")
  lastEditedSnippets Snippet[]           @relation("LastEditorRelation")
  tasksAssigned      Task[]              @relation("AssignedToRelation")
  tasksCreated       Task[]              @relation("TaskAuthorRelation")
  UserPinnedProject  UserPinnedProject[]
  provider Provider
  chats     Chat[]   @relation("Sender")
}

enum Provider {
  GOOGLE
  GITHUB
  LOCAL
}

model Project {
  id          String              @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  isPublic    Boolean             @default(false)
  ownerId     String
  owner       User                @relation("ProjectOwner", fields: [ownerId], references: [id])
  snippets    Snippet[]
  tasks       Task[]
  pinnedBy    UserPinnedProject[]
  docs        Doc[]
}

model UserPinnedProject {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, projectId])
}

model Snippet {
  id             String   @id @default(cuid())
  title          String
  language       String
  content        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  projectId      String
  authorId       String?
  lastEditedById String?
  extension      String?
  author         User?    @relation("AuthorRelation", fields: [authorId], references: [id])
  lastEditedBy   User?    @relation("LastEditorRelation", fields: [lastEditedById], references: [id])
  project        Project  @relation(fields: [projectId], references: [id])
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  assignedToId String?
  authorId     String?
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  projectId    String
  assignedTo   User?      @relation("AssignedToRelation", fields: [assignedToId], references: [id])
  author       User?      @relation("TaskAuthorRelation", fields: [authorId], references: [id])
  project      Project    @relation(fields: [projectId], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Doc {
  id        String   @id @default(uuid())
  label     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  roomId  String   @unique
  content   Json?    @default("{}") 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String    @id @default(uuid())
  sender    User?     @relation("Sender", fields: [senderId], references: [id])
  senderId  String?
  title     String?   
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[] @relation("ChatMessages") 
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation("ChatMessages", fields: [chatId], references: [id], onDelete: Cascade)
  content   String
  isUser    Boolean 
  createdAt DateTime @default(now())
}